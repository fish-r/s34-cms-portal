import mongoose from 'mongoose';

/**
 * Interfaces
 * Id is not included because MongoDB will create a uuid for us
 */
export interface ContentRequestBody {
  ownerId: string;
  title: string;
  createdAt: Date;
  updatedAt: Date;
  processingStartedAt?: Date;
  processingEndedAt?: Date;
  isProcessed?: boolean;
  s3Key?: string;
  questions?: Question[];
}

interface Question {
  parentId: string;
  title: string;
  description: string;
  answer: string;
}

/**
 * Content Schema for creating a MongoDB Document
 * @param ownerId String: Id of user who uploaded the content
 * @param title String: Title for the content object [Must be unique]
 * @param createdAt Date: Date inserted into MongoDB
 * @param lastUpdatedAt Date: Date of last update in MongoDB
 * @param processingStartedAt Date: Date which is sent to model to generate questions
 * @param processingEndedAt Date: Date when questions are generated
 * @param isProcessed Boolean: If questions have been generated
 * @param s3Key String: Key of object saved in Amazon S3 [Must be unique]
 * @param questions Question[]: Questions generated by the Model
 * @param classifiedRoles String[]: Roles that have been classified from the content
 */
export const ContentSchema = new mongoose.Schema({
  ownerId: { type: String, required: true },
  title: { type: String, required: true, unique: true },
  processingStartedAt: {
    type: Date,
    required: false,
    default: undefined,
  },
  processingEndedAt: {
    type: Date,
    required: false,
    default: undefined,
  },
  isProcessed: { type: Boolean, required: false, default: false },
  s3Key: {
    type: String,
    required: false,
    unique: true,
    default: undefined,
    sparse: true,
  },
  questions: {
    type: Array<Question>,
    required: false,
    default: undefined,
  },
});

ContentSchema.set('timestamps', true);

/**
 * Samples
 */
// TODO: removed when done testing
// const sampleQuestion1: Question = {
//   // id: '1',
//   parentId: 'content1',
//   title: 'Phishing Email',
//   description: 'You see a random email link. Should you click it?',
//   answer: 'No',
//   classifiedRole: 'cyber security',
// };

// const sampleQuestion2: Question = {
//   // id: '1',
//   parentId: 'content1',
//   title: 'Sustainability',
//   description: 'Should you turn off the lights when exiting the office?',
//   answer: 'Yes',
//   classifiedRole: 'human resource',
// };

// export const sampleContent: Content = {
//   // id: 'content1',
//   ownerId: 'yufan',
//   title: 'samplefile',
//   createdAt: new Date(),
//   lastUpdatedAt: new Date(),
//   processingStartedAt: undefined, sparse: true,
//   processingEndedAt: null, sparse: true,
//   isProcessed: false,
//   s3Key: '/content/samplefile',
//   questions: [sampleQuestion1, sampleQuestion2],
//   classifiedRoles: ['compliance', 'cyber security', 'human resource'],
// };

/**
 * Schema for MongoDB
 */
// const QuestionSchema = new mongoose.Schema({
//   parentId: { type: String, required: true },
//   title: { type: String, required: true },
//   description: { type: String, required: true },
//   answer: { type: String, required: true },
//   classifiedRole: { type: String, required: true },
// });
